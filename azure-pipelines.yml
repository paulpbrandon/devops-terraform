trigger:
- none

pool:
  vmImage: ubuntu-latest

jobs:
- job: init
  displayName: 'Initialise Terraform'
  steps:
  - task: AzureCLI@2
    displayName: 'Azure CLI create state store'
    inputs:
      azureSubscription: 'Azure'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
       az group create --location uksouth --name $(tfstategroup)
     
       az storage account create -n $(tfstatestore) -g $(tfstategroup) --location uksouth
     
       az storage container create -n terraform --account-name $(tfstatestore)
     
       az storage account keys list -g $(tfstategroup) -n $(tfstatestore) | grep value | sed -n 1p | sed 's/.*"value": "\(.*\)"/\1/g' > .key
     
       echo "##vso[task.setvariable variable=storagekey;issecret=true]$(cat .key)"
  - task: replacetokens@5
    displayName: 'Replace tokens in tf files'
    inputs:
      rootDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      targetFiles: |
       **/providers.tf
       **/*.tfvars
      tokenPattern: rm
      escapeType: none
  - task: TerraformInstaller@0
    displayName: 'Install Terraform 1.2.7'
    inputs:
      terraformVersion: '1.2.7'
  - task: TerraformTaskV3@3
    displayName: 'Terraform init'
    inputs:
      provider: 'azurerm'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      backendServiceArm: 'Azure'
      backendAzureRmResourceGroupName: '$(tfstategroup)'
      backendAzureRmStorageAccountName: '$(tfstatestore)'
      backendAzureRmContainerName: terraform
      backendAzureRmKey: terraform.tfstate
  - task: TerraformTaskV3@3
    displayName: 'Terraform plan'
    inputs:
      provider: 'azurerm'
      command: plan
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      environmentServiceNameAzureRM: 'Azure'

- job: manual_wait
  displayName: 'Wait for permission to apply'
  pool: server
  dependsOn: init
  steps:
  - task: ManualValidation@0
    timeoutInMinutes: 1440
    inputs:
      instructions: 'This pause exists as sometimes you just want to check something plans, and then apply at a later more convenient time'

- job: apply
  displayName: 'Apply changes to infrastructure'
  dependsOn: manual_wait
  steps:
  - task: AzureCLI@2
    displayName: 'Azure CLI get state store key'
    inputs:
      azureSubscription: 'Azure'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
       az storage account keys list -g $(tfstategroup) -n $(tfstatestore) | grep value | sed -n 1p | sed 's/.*"value": "\(.*\)"/\1/g' > .key
     
       echo "##vso[task.setvariable variable=storagekey;issecret=true]$(cat .key)"
  - task: replacetokens@5
    displayName: 'Reapply tokens in tf files'
    inputs:
      rootDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      targetFiles: |
       **/providers.tf
       **/*.tfvars
      tokenPattern: rm
      escapeType: none
  - task: TerraformInstaller@0
    displayName: 'Install Terraform 1.2.7'
    inputs:
      terraformVersion: '1.2.7'
  - task: TerraformTaskV3@3
    displayName: 'Terraform init'
    inputs:
      provider: 'azurerm'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      backendServiceArm: 'Azure'
      backendAzureRmResourceGroupName: '$(tfstategroup)'
      backendAzureRmStorageAccountName: '$(tfstatestore)'
      backendAzureRmContainerName: terraform
      backendAzureRmKey: terraform.tfstate
  - task: TerraformTaskV3@3
    displayName: 'Terraform apply'
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      environmentServiceNameAzureRM: 'Azure'
